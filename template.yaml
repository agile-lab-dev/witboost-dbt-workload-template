apiVersion: scaffolder.backstage.io/v1beta3
kind: Template
metadata:
  name: aws-workload-dbt-transformation-template.1
  title: DBT Transformation Workload
  description: Defines the a DBT project skeleton to perform data transformation
  mesh:
    icon: https://seeklogo.com/images/D/dbt-logo-500AB0BAA7-seeklogo.com.png
  tags:
    - dbt
    - sql
    - workload
spec:
  owner: agilelab
  type: workload

  parameters:
    - title: Component Metadata
      description: Basic Information for this component.
      required:
        - name
        - domain
        - dataproduct
        - description
      properties:
        name:
          title: Name
          type: string
          description: Display name for this workload.
          ui:field: EntityNamePicker
          default: DBT Transformation Workload
          ui:options:
            allowArbitraryValues: true
        fullyQualifiedName:
          title: Fully Qualified Name
          type: string
          description: Human-Readable name that describes better the Workload.
        description:
          title: Description
          type: string
          description: Required. Detailed explanation about the function and the meaning of this Workload.
        domain:
          title: Domain
          type: string
          description: Required. Domain of the Data Product this storage component belongs to
          ui:field: EntityPicker
          ui:options:
            allowArbitraryValues: false
            allowedKinds:
              - Domain
        dataproduct:
          title: Data Product
          type: string
          description: Required. Data Product this Workload belongs to
          ui:field: EntityPicker
          ui:filter:
            - fieldName: domain
              entityPath: spec.domain
          ui:options:
            allowArbitraryValues: false
            allowedKinds:
              - System
        identifier:
          title: Identifier
          type: string
          description: Autogenerated from the information above. A unique identifier for the component. It will not be editable after creation and is a string that is composed of [a-zA-Z] separated by any of [-_].
          ui:field: ComponentIdentifierPicker
          ui:options:
            allowArbitraryValues: false
        developmentGroup:
          title: DevelopmentGroup
          type: string
          description: Automatically selected from the Data Product metadata. Data Product development group.
          ui:field: EntitySelectionPicker
          ui:fieldName: dataproduct
          ui:property: spec.owner
          ui:options:
            allowArbitraryValues: false
        dependsOn:
          title: Dependencies
          type: array
          default: []
          items:
            type: string
            ui:field: EntityComponentsPicker
            ui:fieldName: dataproduct
            ui:options:
              allowArbitraryValues: false
          description: A component could depend on other components in the same Data Product. This information will be used to deploy the components in such an order that their dependencies already exist.
        readsFrom:
          title: Reads from
          type: array
          default: []
          items:
            type: string
            ui:field: ReadsFromPicker
          description: This is filled only for DataPipeline workloads and it represents the list of output ports or external systems that is reading.
        tags:
          title: Tags
          type: array
          default: []
          description: Tags for the component.
          items:
            type: string

    - title: DBT Project Details
      required:
        - underlyingStorage
      properties:
        dbtName:
          title: Project Name
          type: string
          description: Add a custom name to your dbt project
          default: dmb_dbt_transform
        underlyingStorage:
          title: Storage Area
          type: string
          description: Underlying Storage this output port will read from.
          ui:field: EntityComponentsPicker
          ui:componentsFilter: storage
          ui:fieldName: dataproduct
        underlyingValues:
          type: object
          description: test
          ui:options:
            displayTitle: false
          properties:
            database:
              title: Database
              type: string
              ui:field: EntitySelectionPicker
              ui:fieldName: underlyingStorage
              ui:property: spec.mesh.specific.database
              ui:options:
                allowArbitraryValues: false
            schema:
              title: Schema
              type: string
              ui:field: EntitySelectionPicker
              ui:fieldName: underlyingStorage
              ui:property: spec.mesh.specific.schema
              ui:options:
                allowArbitraryValues: false
        cloudStorage:
          title: Cloud Storage Details
          type: object
          default: AWS
          properties:
            storageProvider:
              type: string
              title: Cloud Storage
              enum:
                - AWS
                - GCP
          dependencies:
            storageProvider:
              oneOf:
                - properties:
                    storageProvider:
                      enum:
                        - AWS
                    bucketURI:
                      title: Path to the Object Storage
                      type: string
                      description: Provide the Path to the Object Storage in the corresponding cloud infrastructure in the form of URI. Replace the <bucket-name> placeholder with your preferred bucket name which can be used to store artifacts.
                      default: s3://<bucket-name>/
                    region:
                      title: Region
                      type: string
                      description: Region where the Object Storage is available.
                      default: EU_WEST_1
                - properties:
                    storageProvider:
                      enum:
                        - GCP
                    bucketURI:
                      title: Bucket URI
                      type: string
                      description: Path to the Object Storage.
        secrets:
          title: Secret Connection Details
          type: object
          default: AWS
          properties:
            secretsProvider:
              type: string
              title: Cloud Storage
              enum:
                - AWS
                - GCP
          dependencies:
            secretsProvider:
              oneOf:
                - properties:
                    secretsProvider:
                      enum:
                        - AWS
                    secretId:
                      title: Secret ID
                      type: string
                      description: Secret ID which is used to retrieve the connection details from the Secret Manager.
                      default: airflow/connections/snowflake_test
                    region:
                      title: Region
                      type: string
                      description: Region where the Secret ID information is located.
                      default: EU_WEST_1

  steps:
    - id: template
      name: Fetch Skeleton + Template
      action: fetch:template
      input:
        url: ./skeleton
        targetPath: '.'
        copyWithoutTemplating:
          - .gitlab-ci.yml
        values:
          name: '${{ parameters.name }}'
          fullyQualifiedName: '${{ parameters.fullyQualifiedName }}'
          description: '${{ parameters.description }}'
          domain: '${{ parameters.domain }}'
          dataproduct: '${{ parameters.dataproduct }}'
          identifier: '${{ parameters.identifier }}'
          developmentGroup: '${{ parameters.developmentGroup }}'
          dependsOn: '${{ parameters.dependsOn }}'
          readsFrom: '${{ parameters.readsFrom }}'
          tags: '${{ parameters.tags }}'
          dbtProjectName: '${{ parameters.dbtName }}'
          database: '${{ parameters.underlyingValues.database }}'
          schema: '${{ parameters.underlyingValues.schema }}'
          cloudStorage: '${{ parameters.cloudStorage }}'
          secrets: '${{ parameters.secrets }}'
          useCaseTemplateId: urn:dmb:utm:aws-workload-dbt-transformation-template:0.0.0
          infrastructureTemplateId: urn:dmb:itm:aws-workload-dbt-transformation-provisioner:0
          useCaseTemplateVersion: 0.0.0
          repoUrl: &destination 'gitlab.com?owner=AgileDMBSandbox%2F${{orgname}}%2Fmesh.repository%2F${{ parameters.domain | replace(r/domain:| |-/, "") }}%2F${{ parameters.dataproduct.split(".")[1] | replace(r/ |-/g, "") }}&repo=${{ parameters.name.split(" ") | join("") | lower }}'
          rootDirectory: '.'

    - id: publish
      name: Publish
      action: witboostMeshComponent:publish:gitlab
      input:
        allowedHosts: ['gitlab.com']
        description: 'This is ${{ parameters.name }}'
        repoUrl: *destination
        rootDirectory: '.'
        dataproduct: '${{ parameters.dataproduct }}'

    - id: register
      name: Register
      action: catalog:register
      input:
        repoContentsUrl: '${{ steps.publish.output.repoContentsUrl }}'
        catalogInfoPath: '/catalog-info.yaml'

  output:
    links:
      - title: Repository
        url: '${{ steps.publish.output.remoteUrl }}'
      - title: Open in catalog
        icon: catalog
        entityRef: '${{ steps.register.output.entityRef }}'
